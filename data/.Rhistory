install.packages(pkgs=c("CircStats", "deSolve", "coda", "deldir", "igraph", "RandomFields", "ks"))
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
Install <- TRUE
toInstall <- c("ggplot2", "ggmap", "plyr", "lme4", "rgl", "vegan", "scatterplot3d", "VGAM")
if(Install){
install.packages(toInstall,
dependencies = TRUE,
repos = "http://cran.us.r-project.org")
}
library(ggplot2)
library(ggmap)
library(plyr)
library(ggplot2)
MyData <- data.frame(X = rnorm(100), Y = rnorm(100))
p1     <- ggplot(MyData)
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     #This should produce a graph.
knitr::opts_chunk$set(echo = TRUE)
# k-means clustering
km <-kmeans(Boston, centers = 2)
knitr::opts_chunk$set(echo = TRUE)
# access the MASS package
library(MASS)
# load the data
data("Boston")
# explore the dataset
str(Boston)
summary(Boston)
pairs(Boston)
dotchart(Boston$crim)
dotchart(Boston$zn)
library(corrplot)
library(magrittr)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>%round(digits=2)
# print the correlation matrix
print(cor_matrix)
# visualize the correlation matrix
corrplot(cor_matrix, method="circle",type="upper",cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled<-as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE,label=c("low","med_low","med_high","high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
##dividing the data into training and testing sets
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# linear discriminant analysis
lda.fit <- lda(crime~., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2,col=classes,pch=classes)
lda.arrows(lda.fit, myscale = 1)
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
#standardize the data set
boston_scaled2 <- scale(Boston)
# class of the boston_scaled object
class(boston_scaled2)
# change the object to data frame
boston_scaled2<-as.data.frame(boston_scaled2)
# euclidean distance matrix
dist_eu <- dist(boston_scaled2)
# look at the summary of the distances
summary(dist_eu)
# k-means clustering
km <-kmeans(boston_scaled2, centers = 3)
# plot the Boston dataset with clusters
pairs(boston_scaled2, col = km$cluster)
# k-means clustering
km <-kmeans(boston_scaled2, centers = 5)
# plot the Boston dataset with clusters
pairs(boston_scaled2, col = km$cluster)
# MASS, ggplot2 and Boston dataset are available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_scaled2, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
library(ggplot2)
# MASS, ggplot2 and Boston dataset are available
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_scaled2, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_scaled2, centers = 2)
# plot the Boston dataset with clusters
pairs(boston_scaled2, col = km$cluster)
# plot the Boston dataset with clusters
pairs(boston_scaled2[6:10], col = km$cluster)
# k-means clustering
km <-kmeans(boston_scaled2, centers = 3)
# plot the Boston dataset with clusters
pairs(boston_scaled2[6:10], col = km$cluster)
# plot the Boston dataset with clusters
pairs(boston_scaled2[9:14], col = km$cluster)
# k-means clustering
km <-kmeans(boston_scaled2, centers = 5)
# plot the Boston dataset with clusters
pairs(boston_scaled2[6,10], col = km$cluster)
# k-means clustering
km <-kmeans(boston_scaled2, centers = 2)
# plot the Boston dataset with clusters
pairs(boston_scaled2[6:10], col = km$cluster)
# plot the Boston dataset with clusters
pairs(boston_scaled2[1:6], col = km$cluster)
# plot the Boston dataset with clusters
pairs(boston_scaled2[7:14], col = km$cluster)
# plot the Boston dataset with clusters
pairs(boston_scaled2[9:14], col = km$cluster)
# plot the Boston dataset with clusters
pairs(boston_scaled2[10:14], col = km$cluster)
setwd("~/GitHub/IODS-project/data")
# Read the BPRS data
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
# Look at the (column) names of BPRS
names(BPRS)
# Look at the structure of BPRS
str(BPRS)
# Print out summaries of the variables
summary(BPRS)
# Read the BPRS data
BPRS <- read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/BPRS.txt", sep  =" ", header = T)
# Look at the (column) names of BPRS
names(BPRS)
# Look at the structure of BPRS
str(BPRS)
# Print out summaries of the variables
summary(BPRS)
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt",header = T,sep = ",")
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt",header = T,sep = " ")
# Look at the (column) names of RATS
names(RATS)
# Look at the structure of RATS
str(BPRSRATS)
# Print out summaries of the variables
summary(RATS)
View(RATS)
# Read the RATS data
RATS<-read.table("https://raw.githubusercontent.com/KimmoVehkalahti/MABS/master/Examples/data/rats.txt",header = T,sep = "\t")
# Look at the (column) names of RATS
names(RATS)
# Look at the structure of RATS
str(BPRSRATS)
# Print out summaries of the variables
summary(RATS)
# Look at the structure of RATS
str(RATS)
# Access the packages dplyr and tidyr
library(dplyr)
library(tidyr)
# Factor treatment & subject
BPRS$treatment <- factor(BPRS$treatment)
BPRS$subject <- factor(BPRS$subject)
# Factor treatment & subject in RATS
RATS$ID <- factor(RATS$ID)
RATS$Group <- factor(RATS$Group)
# Convert to long form
BPRSL <-  BPRS %>% gather(key = weeks, value = bprs, -treatment, -subject)
View(BPRSL)
View(BPRS)
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr("week")))
# Extract the week number
BPRSL <-  BPRSL %>% mutate(week = as.integer(substr(BPRSL$week,5,5)))
# Take a glimpse at the BPRSL data
glimpse(BPRSL)
View(RATS)
RATSL <- RATS %>%
gather(key = WD, value = weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(RATSL$WD,3,4)))
RATSL <- RATS %>%
gather(key = WD, value = weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(RATS$WD,3,4)))
RATSL <- RATS %>%
gather(key = WD, value = weight, -ID, -Group)
RATSL <- RATS %>%
gather(key = WD, value = Weight, -ID, -Group) %>%
mutate(Time = as.integer(substr(WD,3,4)))
# Glimpse the data
glimpse(RATSL)
# Glimpse the data
glimpse(RATSL)
View(RATSL)
