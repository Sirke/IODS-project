install.packages(pkgs=c("CircStats", "deSolve", "coda", "deldir", "igraph", "RandomFields", "ks"))
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
Install <- TRUE
toInstall <- c("ggplot2", "ggmap", "plyr", "lme4", "rgl", "vegan", "scatterplot3d", "VGAM")
if(Install){
install.packages(toInstall,
dependencies = TRUE,
repos = "http://cran.us.r-project.org")
}
library(ggplot2)
library(ggmap)
library(plyr)
library(ggplot2)
MyData <- data.frame(X = rnorm(100), Y = rnorm(100))
p1     <- ggplot(MyData)
p1     <- p1 + geom_point(aes(x = X,y = Y))
p1     #This should produce a graph.
#read in the data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
setwd("F:/kurssit/GitHub/IODS-project/data")
#structure of the data
str(lrn14)
#dimensions of the data
dim(lrn14)
#scale column attitude
lrn14$Attitude<-lrn14$Attitude/10
#see the changes
lrn14$Attitude
#get dplyr from library
library(dplyr)
#create variables
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra<-rowMeans(strategic_columns)
#read in the data
lrn14 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
#scale column attitude
lrn14$attitude<-lrn14$Attitude/10
#check the changes
lrn14$Attitude
#check the changes
lrn14$attitude
#get dplyr from library
library(dplyr)
# questions related to deep, surface and strategic learning
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D06",  "D15", "D23", "D31")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
# select the columns related to deep learning and create column 'deep' by averaging
deep_columns <- select(lrn14, one_of(deep_questions))
lrn14$deep <- rowMeans(deep_columns)
# select the columns related to surface learning and create column 'surf' by averaging
surface_columns <- select(lrn14, one_of(surface_questions))
lrn14$surf <- rowMeans(surface_columns)
# select the columns related to strategic learning and create column 'stra' by averaging
strategic_columns <- select(lrn14, one_of(strategic_questions))
lrn14$stra<-rowMeans(strategic_columns)
#list the columns that we want to keep
keep_columns <- c("gender","Age","attitude", "deep", "stra", "surf", "Points")
# select the 'keep_columns' to create a new dataset
learning2014 <- select(lrn14,one_of(keep_columns))
# see the stucture of the new dataset
learning2014
summary(learning2014)
str(learning2014)
# change the name of the second column
colnames(learning2014)[2] <- "age"
# change the name of "Points" to "points"
colnames(learning2014)[7] <- "points"
# print out the new column names of the data
colnames(learning2014)
# select rows where points is greater than zero
learning2014 <- filter(learning2014,points>0)
#check the changes
str(learning2014)
#check the changes
summary(learning2014)
dim(learning2014)
#save the dataframe as a csv-file to 'data'-folder
#working directory was already defined
write.csv(learning2014,"learning2014.csv",row.names = F)
#read it back in
read.csv("learning2014.csv", header = T)
#check that everything is ok
summary(learning2014)
dim(learning2014)
str(learning2014)
head(learning2014)
read.csv("learning2014.csv",header = T)
read.csv("F:/kurssit/GitHub/IODS-project/data/learning2014.csv",header = T)
learning2014<-read.csv("F:/kurssit/GitHub/IODS-project/data/learning2014.csv",header = T)
str(learning2014)
dim(learning2014)
# Access the gglot2 library
library(ggplot2)
# initialize plot with data and aesthetic mapping
p1 <- ggplot(learning2014, aes(x = attitude, y = points,col=gender))
# define the visualization type (points)
p2 <- p1 + geom_point()
# draw the plot
p2
# add a regression line
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p3+ggtitle("Student's attitude versus exam points")
p4
p1 <- ggplot(learning2014, aes(x = age, y = points,col=gender))
# define the visualization type (points)
p2 <- p1 + geom_point()
# draw the plot
p2
# add a regression line
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p3+ggtitle("Student's age versus exam points")
p4
p1 <- ggplot(learning2014, aes(x = deep, y = points,col=gender))
# define the visualization type (points)
p2 <- p1 + geom_point()
# draw the plot
p2
# add a regression line
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p3+ggtitle("Deep learning approach versus exam points")
p4
p1 <- ggplot(learning2014, aes(x = stra, y = points,col=gender))
# define the visualization type (points)
p2 <- p1 + geom_point()
# draw the plot
p2
# add a regression line
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p3+ggtitle("Strategic learning approach versus exam points")
p4
p1 <- ggplot(learning2014, aes(x = surf, y = points,col=gender))
# define the visualization type (points)
p2 <- p1 + geom_point()
# draw the plot
p2
# add a regression line
p3 <- p2 + geom_smooth(method = "lm")
# add a main title and draw the plot
p4 <- p3+ggtitle("Surface learning approach versus exam points")
p4
#let's take a summary of all the variables
summary(learning2014)
library(GGally)
install.packages("GGally")
library(GGally)
library(ggplot2)
# create a plot matrix with ggpairs()
p <- ggpairs(learning2014, mapping = aes(col=gender,alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
# draw the plot
p
# create a regression model with multiple explanatory variables
my_model2 <- lm(points ~ attitude + stra+surf, data = learning2014)
# print out a summary of the model
summary(my_model2)
# create a regression model with multiple explanatory variables
my_model3 <- lm(points ~ attitude, data = learning2014)
# print out a summary of the model
summary(my_model3)
#I could also use drop1-command to test which variables would drop if non-significant
drop1(model2)
#I could also use drop1-command to test which variables would drop if non-significant
drop1(my_model2)
step1(my_model2)
step(my_model2)
#drop1-command does pretty much the same but in a different order, by adding variables to the model
drop1(my_model2)
my_model3 <- lm(points ~ attitude + stra, data = learning2014)
#summary of the new model
summary(my_model3)
step(my_model3)
#plot
par(mfrow = c(2,2))
plot(my_model3,which=c(1,2,5))
#plot
plot(my_model3)
par(mfrow = c(2,2))
plot(my_model2,which=c(1,2,5))
